从上面队列的声明中可以看出，一个队列包含两个栈stack1和stack2，因此这道题的意图是要求我们操作这两个“后进先出”的栈实现一个“先进先出”的队列CQueue。
我们通过一个具体的例子来分析往该队列插入和删除元素的过程。首先插入一个元素a，不妨先把它插入到stack1，此时stack1中的元素由{a}，stack2为空。再压入两个元素b和c，还是插入到stack1中，此时stack1中的元素有{a,b,c}，其中c位于栈顶，而stack2仍然是空的。
这个时候我们试着从队列中删除一个元素。按照队列先入先出的规则，由于a比b、c先插入到队列中，最先被删除的元素应该是a。元素a存储在stack1中，但并不在栈顶上，因此不能直接进行删除。注意到stack2我们还一直没有使用过，。如果我们把stack1中的元素逐个弹出并压入stack2，元素在stack2中的顺序正好和原来在stack1中的顺序相反。因此经过3次弹出stack1和压入stack2操作之后，stack1为空，而stack2中的元素是{c,b,a},这个时候就可以弹出stack2的栈顶a了。此时的stack1为空，而stack2的元素为{c,b}，其中b在栈顶。
如果我们还想继续删除队列的同步应该怎么办呢？剩下的来嗯个元素是b和c，b比c早进入队列，因此b应该先删除。而此时b恰好又在栈顶上，因此直接弹出，stack2的栈顶既可。这次弹出之后，stack1仍然为空，而stack2为{c}。
从上面的分析中我们可以总结出删除一个元素的步骤：当stack2中不为空时，在stack2中的栈顶元素是最先进入队列的元素，可以弹出。如果stack2为空时，我们把stack1中的元素逐个弹出并压入stack2。由于先进入队列的元素被压到stack1底端，巾帼弹出和压入之后就处于stack2的顶端了，又可以直接弹出。
接下来再出入一个元素d。我们还是把它压入stack1，我们考虑下如删除队列的头部stack2不为空，直接弹出它的栈顶元素c。而c的确是比d先进入队列，应该在d之前从队列中删除，因此不会出现任何矛盾。
相关题目：用两个队列实现一个栈
我们通过一系列的栈的压入和弹出操作来分析两个队列模拟一个栈的过程。我们先往栈内压入元素啊a,b,c，我们把他们都插入queue1.这个时候queue1包含3个元素a,b,c，其中a位于队列的头部，c位于队列的尾部。
现在我们考虑从站内弹出一个元素。根据栈的后入先出的原则，最后被压入栈的c应该最先被弹出。由于c位于queue1的尾部，而我们每次只能从队列的头部删除元素，因此我们可以先从queue1中一次删除元素a,b并插入到queue2中，再从queue1中删除元素c。这就相当于从栈中弹出元素c了。我们可以用同样的方法从栈中弹出元素b
接下来我们考虑往栈内压入一个元素d。此时queue1已经有一个元素，我们就把d插入到queue1的尾部。如果我们再从栈内弹出一个元素，此时被弹出的应该是最后被压入的d。由于d位于queue1的尾部，我们只能先从头删除queue1的元素并插入到queue2，直到在queue1中遇到d在把它删除。
查找和排序
查找和排序都是在程序设计中经常用到的算法。查找相对而言较为简单，不外乎顺序查找、二分查找、哈希表查找和二叉排序树查找。希望应聘者能信手拈来写出完整正确二分查找代码。
如果面试题是要求在排序的数组（或者部分排序的数组）中查找一个数字或者统计某个数字出现的次数，我们都可以尝试用二分查找算法。
哈希表和二叉排序数查找的重点在于考察对应的数据结构而不是算法。哈希表最主要的优点是我们能利用它能够在O(1)时间查找某一元素，是效率最高的查找方式。但其缺点是需要额外的空间来实现哈希表。
面试管经常要求硬派能这比较插入排序冒泡排序贵并排序快速排序等不同算法的优劣。强烈建议应聘者在准备面试的时候，一定要对各种排序算法的特点烂熟于胸，能够从额外空间消耗、平均时间复杂度和最差时间复杂度等方面去比较它们的优缺点。需要特别强调的是，很多公司的面试官喜欢在面试环节中要求应聘者写出快速排序的代码，应聘者不妨自己协议快速排序的函数并用各种数据做测试。
实现快速排序算法的关键在于先在数组中选择一个数字，接下来把数组中的数字分为两部分，比选择小的数字移到数组的左边，比选择的数字大的数字移到数组的右边。
不同的排序算法适用的场合也不尽相同，快速排序虽然总体的平均效率是最好的，但也不是任何时候都是最优的解法。
我们注意到旋转之后的数组实际上可以划分为两个排序的子数组，而且前面的子数组的元素都大于或者等于后面子数组的元素。我们还注意到最小的元素刚好是这两个子数组的分界线。在排序的数组中我们可以用二分查找发实现O(logn)的查找。本体给出的数组在一定程序上是排序的，因此我们可以试着用二分查找法的思路来寻找这个最小的元素。
接着我们可以找到数组中间的元素。如果该中间元素位于前面的递增的子数组，那么它应该大于或者等于第一个指针指向的元素。此时数组中最小的元素应该在该中间元素的后面。我们可以把第一个指针指向该中间元素，这样可以缩小寻找的范围。移动之后的第一个指针仍然位于前面的递增子数组之中。
不管是移动第一个指针还是第二个指针，查找的范围都会缩小到原来的一般。接下来我们再用更新之后的两个指针，重复做新一轮的查找
按照上述的四路，第一个指针总是指向前面递增数组的元素，第二个指针总是指向后面递增数组的元素。最终第一个指针将指向前面子数组的最后一个元素，而第二个指针会指向后面子数组的第一个元素。也就是它们最终回指向两个相邻的元素，而第二个指针指向刚好是最小元素。这就是循环结束的条件。
以前面的数组{3,4,5,1,2}为例，我们先把第一个指针指向第0个元素，把第二个指针指向第4个元素，位于两个指针中间（在数组中的下标是2）的数字是5,它大于第一个指针指向的数字。因此中间数字5一定位于第一个递增的数组中，并且最小的数字一定位于它的后面。因此我们可以移动第一个指针让它指向数组的中间。
此时位于这两个指针中间（在数组中的下标是3）的数字是1,它小于第二个指针指向指向的数字，因此这个中间数字1一定位于第二个递增字数组中，并且最小的数字一定位于它的前面或者它自己就是最小的数字。因此我们可以移动第二个指针指向两个指针中间的元素即下标为3的元素。
此时两个指针的距离是1,标明第一个指针已经指向了第一个递增子数组的末尾，而第二个指针指向第二个递增子数组的开头。第二个子数组的第一个数字就是最小的数字，因此第二个指针指向的数字就是我们查找的结果。
int Min(int * numbers,int length)
{
    if(numbers==NULL||length<=0)
        throw new std::exception("Invalid parameters");
    int index1=0;
    int index2=length-1;
    while(numbers[index1]>=numbers[index2])
        {
        int index1=0;
        int index2=length-1;
        int indexMid=index;
        if(index2-index1==1)
        {
            indexMid=index2;
            break;
        }
        indexMid=(index1+index2)/2;
        if(numbers[indexMid]>=numbers[inderx1])
            index1=indexMid;
        else if(numbers[indexMid]<=numbers[index2])
            index2=indexMid;
        }
    return numbers[indexMid];
}
上述代码是否就完美了呢？其实不然，仔细分析下标为index1和index2的两个数相同的情况。在前面的代码中，当这两个数相同，并且它们中间的数字（即indexMid指向的数字）也相同时，我们把indexMid赋值给了index1,也就是认为此时最小的数字位于中间数字的后面。
当两个指针指向的数字及它们中间的数字三者相同的时候，我们无法判断中间的数字是位于前面的子数组中还是后慢的子数组中，也就无法移动两个指针来缩小查找的范围。因此，我们不得不采用顺序查找的办法。
因此我们就可以修改前面的代码
在上述代码中我们采用全局变量来标识是否出错。如果出错了，则返回的值是0.但是为了区分是出错的时候返回的0,还是底数为0的时候正常运行返回的0,我们定义了一个全局变量。当出错时，这个变量被设为true，否则为false。这样做的好处是，我们可以把返回值直接传递给其他变量。
一个细节值得我们注意：在判断底数base是不是等于0时，不能直接写base==0,这是因为在计算机内表示小数时（包括float和double型小数）都有误差。判断两个小数是否相等，只能判断它们之差的绝对值是不是在一个很小的范围内。如果两个数相差很小，就可以认为它们相等。
/*分析：首先我们把字符串中的每一个数字都初始化为‘0’，然后每一次为字符串表示的数字加1,再打印出来。因此我们只需要做两件事：1是在字符串表达的数字上模拟加法，二是把字符串表达的数字打印出来。
在上面的代码中，函数Increment实现在表示数字的字符串number上增加1,而函数PrintNumber打印出number。这两个看似简单的函数都暗藏玄机。
我们需要直到什么时候停止在number上增加1,即什么时候到了最大的n位数“999……99”（n个9）。一个简单的办法是每次递增之后，都调用库函数strcmp比较表示数字的字符串number和最大的n位数“999...99”，如果相等则表示已经到了最大的n位数并终止递增。虽然strcmp很简单，但对于长度为n的字符串，它的时间复杂度为O(n).
我们注意到只有对“999..99”加1的时候，才会在第一个字符（下标为0）的基础上产生进位，而其他所有情况都不会在第一个字符上产生进位。因此当我们发现在加1时第一个字符产生了进位，则已经是最大的n位数，此时Increment返回true，因此函数Print1tomaxofndigits中的while循环终止，如何在每一次增加1之后快速判断是不是到了最大的n位数是本题的一个小陷阱。
接下来我们嫩再考虑如何打印用字符串表示的数字。虽然库函数printf可以很方便地就能打印一个字符串，但在本题中调用printf并不是最合适的解决方案。前面我们提到，当数字不够n位的时候，我们在数字前面补0,打印的时候这些补位的0不应该打印出来。比如输入3的时候，数字98用字符串表示成“098”。如果之间诶打印出098,就不符合我们的习惯。为此我们定义了函数PrintNumber，在这个函数里，我们只有在碰到第一个非0的字符之后才开始打印，直到字符串的结尾。
在单向链表删除一个结点，最长贵的做法无疑是从链表的头结点开始，顺序比阿里查找要删除的结点，并在链表中删除该结点。
我们想要删除结点i，可以从链表的头结点a开始顺序遍历，发现结点h的m_pNext指向要删除的结点i，于是我们就可以把结点h的m_pNext指向i的下一个结点即结点j。指针调整之后，我们就可以安全地删除结点i并保证链表没有断开。
1一个链表
2删除结点i之前，先从链表的头结点开始遍历到i前面的一个结点h，把h的m_pNex指向i的下一个结点j，再删除结点i。
3把结点j的内容复制覆盖结点i，接下来再把结点i的m_pNext指向j的下一个结点之后删除结点j。
那是不是一定需要得到被删除的结点的前一个结点呢？答案是否定的。我们可以很方便地得到要删除的结点的下一个结点。如果我们把下一个结点的内容复制到需要删除的结点上覆盖原有的内容，再把下一个即结点删除，那是不是相当于把当前需要删除的结点删除了？
上述思路还有一个问题：如果要删除的结点位于链表的尾部，那么它没有下一个结点，怎么办？我们仍谈从链表的头结点开始，顺序遍历得到该结点的前序结点，并完成删除操作。
最后需要注意的是，如果链表中只有一个结点，而我们又要删除链表的头结点（也是尾结点），此时我们在删除结点之后，还需要把链表的头结点设置为NULL.
我们发现要解决两个新问题，其实只需要修改函数RecoderOddEveen中的两处判断的标准，而大的逻辑框架完全不需要改动。因此我们可以把这个逻辑框架抽象出来，而把判断的标准变成一个函数指针，也就是用一个

为了得到倒数第k个结点，很自然的想法就是先走到链表的尾端，再从尾端回溯k步。可是我们从链表的定义可以看出本题的链表是单向链表，单向链表的结点只有从前往后的指针而没有从后往前的指针，因此这种思路行不通。
既然不能从尾结点开始遍历这个链表，我们还是把思路回到头结点上来。假设链表有n个结点，那么倒数第k个结点就是从头结点开始的n-k+1个结点。如果哦我们能够得到链表中结点的个数n。那我们只要从头结点开始往后走n-k+1步就可以了。
也就是说我们需要遍历链表两次，第一次统计链表中结点的个数，第二次就能找到倒数第k个结点。第
遍历链表一次的思路：为了实现只遍历链表一次就能找到倒数第k个结点，我们可以定义两个指针。第一个指针从链表的头指针开始遍历向前走k-1,第二个指针保持不动，第二个指针也开始从链表的头指针开始遍历。由于两个指针的距离始终保持在k-1,当第一个(走在前面的)指针达到链表的尾结点时，第二个指针(走在后面的)指针正好是倒数第k个即结点。

解决与链表相关的问题总是由大量的指针操作，而指针操作的代码总是容易出错的。很多面试官喜欢出链表相关的问题，就是想通过指针操作来考察应聘者的编码功底。为了避免出错，我们最好先进行全面的分析。。

为了正确地反转一个链表，需要调整链表的指针方向。为了将调整指针这个复杂过程分析清楚，我们可以借助图形来直观地分析，在如图所示的链表中，h、i、j是三个相邻的结点。假设经过若干操作，我们已经把结点h之前的指针调整完毕，这些结点的m_pNext都指向前面的一个结点。接下来我们把i的m_pNext指向h，此时的链表结构如图所示
不难注意到，由于结点i的m_pNext指向了它的前一个结点，导致我们无法遍历到结点j。为了避免链表在结点i处断开，我们需要在调整结点i的m_pNext之前，把结点j保存下来。
也就说我们在调整结点i的m_pNext指针时，除了需要知道结点i本身之外，还需要i的前一个结点h，因为我们需要把结点i的m_pNext指针指向h，同时我们还实现需要保存i的下一个结点j，以防止链表断开。因此相应地我们需要定义3个指针，分别指向当前遍历到的结点、它的前一个结点以及后一个结点。
最后我们试着找到反转后链表的头结点，不难分析出反转后链表的头结点是原始链表的尾结点。什么结点是尾结点？自然是m_pNext为NULL的结点

合并链表
我们继续合并两个链表中剩余的结点。在两个链表中剩下的结点依然是排序的，因此合并这两个链表的步骤和前面的步骤是一样的，我们还是比较两个头结点的值。此时链表2的头结点的值小于链表1头结点的值，因此链表2的头结点的值将是合并剩余结点得到的链表的头结点，我们把这个结点和前面合并链表得到的链表的尾结点连接起来。
当我们得到两个链表中值较小的头结点并把它连接到已经合并的链表之后，两个链表剩余的结点依然是排序的，因此合并的步骤和之前的步骤是一样的。这就是一个典型的递归过程，我们可以定义递归函数完成这一合并过程。
接下来我们来解决鲁棒性的问题。每当代码试图访问空指针的内存时程序就会崩溃，从而导致鲁棒性问题。在本题一旦输入空的链表就回引入空的指针，因此我们要对空链表单独处理。当第一个链表是空链表，也就是它的头结点是一个空指针时，那么把它和第二个链表合并，显然合并的链表就是第二个链表。同样，当输入的第二个链表的头结点是空指针的时候，我们把它和第一个链表合并得到的结果就是第一个链表。如果两个链表都是空链表，合并的链表得到的结果就是空链表。

树的子结构
例如图示的两颗二叉树，由于A有一部分子树的结构和B是一样的，因此B是A的子结构。
和链表相比，树中的指针操作更多也更复杂，因此与树相关的问题通常会比链表的要难。
现在回到这个题目本身。要查找树A中是否存在和数B结构一样的子树，我们可以分成两步：第一个在树A中找到和B的根结点的值一样的结点R，第二部再判断树A中以R为根结点的子树是不是包含和B一样的结构。
以上面的两棵树为例来分析这个过程。首先我们试着在树A中找到值为8（树B的根结点的值）的结点。从树A的根结点开始遍历，我们发现它的根结点的值就是8.接着我们就去判断树A的根结点下面的子树是不是含有和树B一样的结构。在数A中，根结点的左子结点的值是8,而树B的根结点左子结点是9,对应的两个结点不同。
因此我们仍然需要遍历树A，接着查找值为8的结点。我们在树的第二层中找到了一个值为8的结点，然后进行第二部判断，即判断这个结点下面的子树是否含有和树B一样结构的子树。于是我们遍历这个结点下面的子树，先后得到两个子结点9和2,这和树B的结构完全相同。此时我们在树A中找到了和树B的结构一样的子树，因此树B是树A的子结构。

树的镜像
仔细分析这两棵树的特点，看看能不能求出镜像的步骤。这两棵树的根结点相同，但它们的左右两个子结点交换了位置。因此我们不妨现在树中交换根结点的两个子结点。就的到了第二个二叉树。
交换根结点的两个子结点之后，我们注意到值为10、6的结点的子结点仍然保持不变，因此我们还需要交换这两个结点的左右子结点。交换之后的结果分别是图4.2中的第三棵树和第四棵树。做完这两此交换之后，我们已经遍历完所有的非叶子结点。此时变换之后的树刚好就是原始树的镜像。
总结上面的过程，我们得出求一棵树的镜像的过程：我们先前序遍历这棵树的每个结点，如果遍历到的结点所有子结点，就交换它的两个子结点。当交换完所有非叶子结点的左右子结点之后，就得到了树的镜像。

和上一节画图的方法一样，我们也可以借助举例模拟的方法来思考分析复杂的问题。当一眼看不出问题中隐藏的规律的时候，我们可以试着用一两个具体的例子模拟操作的过程，这样说不定能通过具体的例子能找到抽象的规律。

首先往空的数据栈里压入数字3,显然现在3是最小值，我们也把这个最小值压入辅助栈。接下来往数据栈里压入数字4.由于4大于之前的最小值。因此我们仍然往辅助栈里压入数字3.第三步继续往数据栈里压入数字2.由于2小于之前的最小值3,因此我们把最小值更新为2,并把2压入辅助栈。同样当压入数字1时，也姚更新最小值。并把新的最小值1压入辅助栈。
从表中我们可以看出，如果每次都把最小元素压入辅助栈，那么就能保证辅助栈的栈顶一直都是最小元素。当最小元素从数据栈内被弹出之后，同时弹出辅助栈的栈顶元素，此时辅助栈的新栈顶元素就是下一个最小值

栈的压入、弹出序列。
解决这个问题很直观的想法就是建立一个辅助栈，把输入的第一个序列的数字一次压入该辅助栈，并按照第二个序列的顺序一次从该栈中弹出数字。
以弹出序列4,5,3,2,1为例分析压栈和弹出的过程。第一个希望弹出的数字是4,首先4需要压入到辅助栈里面。压入栈的顺序由压栈序列确定了，也就是再把4压进栈之前，数字1,2,3,都需要先压入到栈里面。此时栈里面包含4个数字，分别是1,2,3,4,其中4位于栈顶。把4弹出栈之后，剩下的三个数字是1，2,3，。接下来希望被弹出的数字是5,由于它不是栈顶数字，因此我们接着在第一个序列中把4以后数字压入辅助栈中，直到压入数字5.这个时候5位于栈顶，就可以被弹出来了。接下来希望被弹出的数字分别是3,2,1。由于每次操作前它们都位于栈顶。因此直接弹出即可。

从上往下打印二叉树
这道题是指是考察树的遍历算法。
因为按层打印的顺序决定应该先打印根结点，所以我们从树的根结点开始分析。为了接下来能够打印值为8的结点的两个子结点，我们应该在遍历到该结点时把值为6和10的两个结点保存到一个容器里，现在容器内就有两个结点了， 按照从左往右打印的要求，我们先取出值为6的结点。打印出值6之后把它的值分为5和5的两个结点放入数据容器。此时数据容器有3个结点，值分别为10、5、7.接下来我们从数据容器中取出值为10的结点。注意到值为10的结点比值为5、7的结点先放入容器，此时又比这个两个结点先取出，这就是我们通常说的先入先出，因此不难看出这个数据容器应该是一个队列。由于值为5、7、9、11的结点都没有子结点，因此只要一次打印即可。

二叉搜索树的后续遍历序列
例如输入数组（5，7,6,9,11,10,8），则返回ture，因为这个整数序列是二叉搜索树的后续遍历结果。如果输入的数组是（7,4,6,5），由于没有那颗二叉搜索树的后续遍历的结果是这个序列，因此返回false。
在后序遍历得到的序列中，最后一个数字是树的根结点的值。数组中前面的数字可以分为两部分：第一部分是左子树结点的值，它们都比根结点的值小;第二部分是右子树结点的值，他们都比根结点的值大。
我们接下来用同样的方法确定与数组每一步分对应的子树的结构。这起始就是一个递归的过程。对于序列5、7、6,最后一个数字6是左子树的根结点的值。数字5比6小，是值为6的结点的左子结点，而7则是它的右子结点。通配每个杨在学列9、11、10中，最后一个数字10是由子树的根结点，数字9比10小，是值为10的结点的左子结点，而11则是它的右子结点。
我们再来分析另一个整数数组{7,4,6,5}。后序遍历的最后一个数是根结点，因此根结点的值是5。由于第一个数字7大于5,因此在对应的二叉搜索树中，根结点上是没有左子树的，数字7,4和6都是右子树结点的值。但是我们发现右子树中有一个结点的值是4,比根结点的值5小，这违背了二叉搜索树的定义。
例如输入图中二叉树和整数22,则打印出两条路径，第一条路径包含结点10、12,第二条路径包含结点10、5、7.
以图中的二叉树作为例子来分析。由于路径是从根结点出发到叶结点，也就说路径总是以根结点为起始结点，因此我们需要先遍历的根结点，在树的前序、中序、后序三种遍历方式中，只有前序遍历是首先访问根结点的。
按照前序遍历的顺序遍历图中二叉树，在访问结点10之后，就会访问结点5。从二叉树结点的定义可以看出，在本题的二叉树结点中没有指向父结点的指针，访问到结点5的时候，我们是不知道前面经过了那些结点的，除非我们把经过的路径上的结点保存下来。每访问到一个结点的时候，我们都把当前的结点添加到路径中去。到达结点5时，路径中包含两个结点，它们的值分别是10和5.接下来遍历到结点4,我们把这个结点也添加到路径中。这个时候已经到达了叶结点，但路径上三个结点的值之和是19.这个和不等于输入的值22,因此不符合要求的路径。
值得注意的是，回到结点5的时候，由于结点4已经不再前往结点7的路径上了，我们需要把结点4从路径中删除。接下来访问到结点7的时候，再把该结点添加到路径中，此时路径中三个结点10,5,7之和刚好是22.
我们最后要遍历的结点是12.在遍历这个结点之前，需要经过结点5回到结点10.同样，每一次从子结点回到父结点的时候，我们都需要在路径上删除子结点。最后从结点10到达结点12的时候，路径上两个结点的值之和也是22,因此这也是一条符合条件的路径。
分析完前面具体的例子之后，我们就找到了一些规律，当前序遍历的方式访问到某一结点时，我们把该结点添加到路径上，并累加该结点的值。如果该结点为叶结点并且路径中结点值的和刚好等于输入的整数，则当前的路径符合要求，我们把它们打印出来。如果当前结点不是叶结点，则继续访问它的子结点。当前结点访问结束后，递归函数将自动回到它的父结点。因此我们在函数退出之前要在路径上删除当前结点并减去当前结点的值，以确保返回父结点时路径刚好是从根结点到父结点的路径。我们不难看出保存路径的数据结构实际上是一个栈，因为路径要递归调用状态一致，而递归调用的本质就是一个压栈和出战的过程。


听到这个问题之后，很多应聘者的第一反映是把复制过程分成两步：第一步是复制原始链表上的每一个结点，并用m_pNext连接起来：第二部是设置每个结点的m_pSibling指针。假设原始链表中的每个结点N的m_pSibling指向结点S，由于S的位置在链表中可能在N前面也可能在N后面，所以要定位S的位置需要从原始链表的头结点开始找。如果从原始链表的头结点开始沿着m_pNext经过s步找到结点S，那么在复制链表上结点N’的m_pSibling（记为S'）离复制链表的投机诶但的举例也是沿着m_pNext指针s步，用这种办法我们可以为复制链表上的每个结点设置m_pSibling指针。
对于一个含有n个结点的链表，由于定位每个结点的m_pSibling都是需要从链表的头结点开始经过O(n)步才能找到，因此这种方法的时间复杂度是O(n^2).
由于上述方法的时间主要花费在定位结点m_pSibling上面，我们试着在这方面去做优化。我们还是分为两部：第一步仍然是复制原始链表上的每个结点N创建N‘，然后把这些创建出来的结点用m_pNext链接起来。同时我们把<N,N'>的配对信息放到一个哈希表中。第二步还是设置复制链表上的每个结点m_pSibling.如果在原始链表中结点N的m_pSibling指向结点S，那么在复制链表中，对应的N’应该指向S‘。由于由了哈希表，我们可以用O(1)的时间根据S找到S’。
第二种方法相当于用空间换时间。对于有n个结点的链表我们需要一个大小为O（n）的哈希表，也就是说我们以O（n）的空间消耗把时间复杂度由O(n^2)降低到O(n).
接下来我们再换一种思路，在不用辅助空间的情况下实现O(n)的时间效率。第三种方法的第一步仍然是根据原始链表的每个结点N创建对应的N‘。这一次我们把N’链接在N的后面。

