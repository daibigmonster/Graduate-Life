字符串是由若干字符组成的序列，由于字符串在编程时使用的频率非常高，为了优化，很多语言都对字符串做了特殊的规定。
C/C++中每个字符串都以字符“\0”作为结尾，这样我们就能很方便地找到字符串的最后尾部。但由于这个特点，每个字符串中都有一个额外的字符开销，少不留神就会造成字符串的越界。比如下面的代码：
char str[10];
strcpy(str,"012345678")
我们先声明一个字符长度为10的字符数组，然后把字符串“0123456789”复制到数组中去。“0123456789”这个字符串看起来只有10个字符，但实际上它的末尾还有一个“\0”字符，因此它的实际长度为11个字节。要正确地复制该字符串，至少需要11个字节的数组。
在网络编程中，如果URL参数中含有特殊字符，如空格。‘#’等，可能导致服务器端无法获得正确的参数值。我们需要将这些特殊符号转换成可以事变的字符。转换的规则是‘%’后面跟上ASCII码的十六进制表示。比如空格的ASCII
。。。。
看到这个题目，我们首先应该想到的是原来一个空格字符，替换之后编程‘%’、'2'和'0'这3个字符，因此字符串汇编长。如果是在原来的字符串上做替换，那么就有可能覆盖修改在该字符串后面的内存。如果是穿件新的字符串并在新的字符串上做替换，那么我们可以自己分配足够多的内存。由于有两种不同的解决方案，我们应该想面试官问清楚，让他明确告诉我们他的需求。假设面试官让我们在原来的字符串上做替换，并且保证输入的字符串后面由足够多的空余内存。

链表
链表应该是面试时被提及最频繁的数据结构。链表的结构很简单，它由指针把若干个节点连接成链状结构。链表的创建、创建节点、删除节点等结构都只需要20行左右的代码就能实现，其代码量比较适合面试。而像哈系表、有向图等复杂数据结构，实现它们的一个操作需要的代码量都比较大。
我们说链表是一种动态的数据结构，是因为在创建链表时，无需知道链表的长度。当插入一个节点时，我们只需要为新结点分配内存，然后调整指针的指向来确保新结点被链接到链表当中。内存分配不是在创建链表时一次性完成，而是每添加一个结点分配一次内存。由于没有闲置内存，链表的空间效率比数组高，单向链表的结点定义如下：
struct ListNode{
    int nValue;
    ListNode *pNext;
};

树
数是一种在实际编程中经常遇到的数据结构。它的逻辑很简单：除了根即诶但之外每个结点都只有一个父结点，根结点没有父结点：除了叶结点之外所有结点都有一个或多个字节点，叶结点没有子结点。父结点和子结点之间用指针连接。由于树的操作会设计大量指针，因此与树有关的面试题都不太容易。当面试官想考察应聘者在有复杂指针操作情况下写代码的能力，他往往会想到用与树相关的面试题。
面试的时候提到数，大部分是二叉树。所谓的二叉树是树的一种特殊结构，在二叉树中每个结点最多只能有两个子结点。在二叉树中最重要的操作莫过于遍历，即按照某一顺序访问树中的所有结点。通常树由如下几种遍历方式。
宽度优先遍历：先访问树的第一层结点，再访问数的第二层结点…………一直访问到最下面一层结点。在同一层结点中，以从做到右的顺序一次访问。我们可以对包括二叉树在内的所有树进行宽度优先遍历。
二叉树由很多特例，二叉搜索树就是其中之一。在二叉搜索树中，左子结点总是小于或等于根结点，而右子结点总是大于或等于根结点。我们可以平均在O(logn)的时间内根据数值在二叉搜索树中找到一个结点。
二叉树的另外蓝个特例是堆和红黑树。堆分为最大堆和最小堆。在最大堆中根结点的值最大，最小堆中根结点的值最小。由很多需要快速找到最大值或最小值的问题都可以用堆来解决。红黑树是把书中的结点定义为红黑两种颜色，并通过规则确保从根结点到叶结点的最长路径长度不超过最短路径的两倍。
既然我们已经分别找到了左右子树的前序遍历和中序遍历序列，我们可以用同样的方法分别去构建左右子树。也就是说，接下来的事情可以用递归的方法完成。

如果一个节点有右子树，那么它的下一个节点就是它的右子树中的最左结点。也就是说，从右子节点出发一直沿着指向左子节点的指针，我们就能找到它的下一个节点。例如节点b的下一个节点是h，节点a的下一个节点是f。
接着我们分析一个节点没有没有右子树的情形。如果节点是它父节点的左子节点，那么它的下一个节点就是它的父节点。
如果一个节点既没有右子树，并且它还是它父节点的右子节点，那么这个情形就比较复杂。我们就可以沿着指向父节点的指针向上遍历，直到找到一个是它父节点的左子节点的节点。

栈和队列
栈是一个非常常见的数据结构，它在计算机领域中被广泛应用，比如操作系统会给每个线程创建一个栈用来存储函数调用时各个函数的参数、返回地址即临时变量等。栈的特点是后进先出，即最后被压入栈的元素会被第一个弹出。
通常栈是一个不考虑排序的数据结构，我们需要O()时间才能找到栈中的最大或者最小的元素。如果想要在O(1)时间得到栈的最大值或者最小值，我们需要对栈做特殊的设计。
队列是另一个很重要的数据结构。和栈不同的是，队列的特点是先进先出，即第一个进入队列的元素将会第一个出来。在介绍数的宽度有限遍历算法中，我们在遍历某一层树的结点时，把结点的子结点放到一个队列里。以备下一层结点的遍历。
栈和队列虽然是针锋相对的两个数据结构，但有意思的是它们却相互联系。
