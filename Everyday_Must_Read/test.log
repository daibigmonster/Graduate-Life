 Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

For example, given s ="aab",
Return1since the palindrome partitioning["aa","b"]could be produced using 1 cut. 
class Solution {
public:
    int minCut(string s) {
        vector<int> dp(s.size(),size()-1);
        for(int i=0;i<s.length();i++){
            dp[i]=Is_palindrome(s.substr(0,i+1))? 0:i;
            if(dp[i]==0)continue;
            for(int j=1;j<=i;j++){
                if(Is_palindrome(s.substr(j,i+1-j))){
                    dp[i]=min(dp[i],dp[j-1]+1);
                }
                else{
                    dp[i]=min(dp[i],dp[j-1]+1+i-j);
                }
            }
        }
        return dp[s.size()-1];
    }
    private:
    bool Is_palindrome(string s){
        int begin=0;
        int end=s.size()-1;
        while(begin<end){
            if(s[begin]==s[end]){
                begin++;
                end--;
            }
            else
                break;
        }
        if(begin>=end)return true;
        return false;
    }
};
