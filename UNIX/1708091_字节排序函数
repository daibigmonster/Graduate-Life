考虑一个16为整数，它由两个字节诶组成。内存中存储这两个字节由两种方法：一种是将地序字节存储在起始地址，这称为小端字节序;另一种方法是将高序字节存储在起始地址，这称为大端字节序。
在该图中，我们在顶部标明内存地址增长的方向为从右到左，在底部标明内存地址增长的方向为从左到右，我们还标明最高有效位是这个16为值最左边一位，最低有效位是这个16位值最右边一位
既然网络协议必须制定一个网络字节序，作为网络编程人员的我们必须清楚不同字节序直接的差异。举例来说，在每个TCP分节中都有16为的端口号和32为的IPv4地址。发送栈和接收协议栈必须就这些多字节字段各个字节的传送顺序达成一致。网络协议使用大端字节序来传送这些多字节整数。
从理论上说，具体实现可以按主机字节序套接字地址结构中的各个字段，等到需要在这些字段和协议部首相应字段之间移动时，再在主机字节序和网络字节序之间进行互转，让我们免于操心转换细节。因此我们要关注如何在主机字节序和网络字节序之间相互转换。这两种字节序之间的转换使用以下4个函数。
#include<netinet>
unint16_t htons(unint16_t host16bitvalue);
unint32_t htonl(unint32_t host32bitvalue);
unint16_t ntohs(unint16_t net16bitvalue);
unint32_t ntohl(unint32_t net32bitvalue);
在这些函数名字中,h代表host,n代表network,s=short,l=long;
因特网标准中另外一个重要的约定是位序
