大多数套接字函数都需要一个指向套接字地址结构的指针作为参数。每个协议族都定义它自己的套接字地址结构。这些结构都以sockaddr_开头，并以对应每个协议族的唯一后缀结尾
IPv4套接字地址结构
IPv4套接字资质结构通常也称为“网际套接字地址结构”，它以sockaddr_in命名，定义在<netinet/in.h>头文件中
struct in_addr{
    in_addr_t s_addt;//32位的IP地址网络字节序
}
struct sockaddr_in{
    uint8_t sin_len;
    sa_fammily sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;
    char sin_zreo[8];
}
利用上图的例子，我们对套接字地址结构作几点说明
长度底端是为增加对OSI协议的支持而随×××添加的。在此之前，第一个成员是sin_family,它是一个无符号短整数。
POSIX规范只需要这个结构中的3个字段,sin_family、sin_addr和sin_port.对于符合POSIX的实现来说，定义额外的结构字段是可以接收的，这对于网际套接字地址结构来说也是正常的。几乎所有的实现都增加了sin_zero字段,所以所有的套接字地址结构大小至少是16字节
我们给出了字段s_addr、sin_familu和sin_port的POSIX数据类型。in_addr_t数据类型必须是一个至少32位的无符号整数类型，in_port_t必须是一个至少16位整数类型，而sa_family_t可以是任何无符号整数类型。在支持长度字段的实现中，sa_family_t通常是一个8位的无符号整数，而不支持长度字段的实现中，它则是一个16为的无符号整数
32位IPv4地址存在两种不同的访问方法。举例来说，如果serv定义为某个网际套接字地址结构，那么serv.sin_addr将按in_addr结构引用其中的32位IPv4地址，而serc.sin_addr.s_addr将按in_addr_t(通常是一个无符号32位整数)引用同一个32位IPv4地址。因此，我们必须正确第使用IPv4地址，尤其是在将它作为函数的参数是，因为编译器对传递结构和传递整数的处理是完全不同的
套接字地址结构仅在给定主机上使用：虽然结构中的某些字段(例如IP地址和端口号)用在不同主机之间的通信中，但是结构本身并不在主机之间传递
套接字函数被定义为指向某个通用套接字地址结构的一个指针作为其参数之一，这正如bind函数的ANSI C函数原型所示
