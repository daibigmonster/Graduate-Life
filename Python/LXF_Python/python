生成器
通过列表生成式，我们可以直接创建一个列表。但是，收到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那么后面绝大多数元素占用的空间都白白浪费了，
所以如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过重不不断地推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。
要创建一个generator，由很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成（）,就创建了一个gennerator：
创建L和g的区别尽在与外层的[]和（），L是一个list，而g是一个generator。
函数式编程
函数是Python内建支持的一种封装，我们通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计，函数就是面向过程的程序设计的基本单元。
而函数式编程——Funtional Programming,虽然也可以归结到面向过程的程序设计，但其思想更接近数学计算。
我们首先要搞明白计算机（Computer）和计算（Computer）的概念。
在计算机的层次上，CPU执行的是加减乘除的指令代码，以及各种条件判断和跳转指令，所以，汇编语言是最贴近计算机的语言。
而计算则指数学意义上的计算，越是抽象的计算，离计算机硬件越远。
对应到编程语言，就是越低级的语言，越贴近计算机，抽象程度低，执行效率高，比如C语言;越高级的语言，越贴近计算，抽象程度高，执行效率低，比如Lisp语言。
函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数哦我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是有副作用的。
函数式编程的一个特点就是，允许函数本身作为参数传入另一个函数，还允许返回一个函数。
Python对函数式编程提供部分支持。Python允许使用变量，因此，Python不是纯函数式编程语言。
高阶函数
高阶函数英文名叫Higher-order function.什么是高阶函数？我们以实际代码为例子，一步一步深入概念。
变量可以指向函数
以Python内置的求绝对值的函数abs（）为例，调用该函数用以下代码：
单数，如果致谢abs呢？
可见，abs(-10)是函数调用，而abs是函数本身。
要获得函数调用结果，我们可以把结果赋值给变量：
结论：函数本身也可以赋值给变量，即：变量可以指向函数。
如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数？用代码验证一下：
函数名也是变量
那么函数名是什么呢？函数名其实就是指向函数的变量！对于abs()这个函数，完全可以把函数名abs看成变量，它指向一个可以计算绝对值的函数！
如果把abs指向其他对象，会有什么情况发生？
把abs指向10之后，就无法通过abs(-10)调用该函数了！因为abs这个便来嗯已经不止向绝对值函数而是指向一个整数10！
当然实际代码绝对不能这么学，这里是为了说明函数名也是变量.要回复abs函数，重启Python交互环境。
注：由于abs函数实际上是定义在import builtins模块中的，所以要修改abs变量的指向在其它模块也生效，要用import builtins;builtins.abs=1-.
传入函数
既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。
Python内建了map()和reduce()函数
如果你读过Google的那篇大名鼎鼎的“MapReduce:Simplified Data Processing on Large Clusters”,你就能大概明白map/reduce的概念。
我们先看map。map()函数接收两个参数
map()传入的第一个参数是f，即函数本身。由于结果r是一个迭代器，迭代器是一个惰性序列，因此通过list()函数让它把整个序列都计算出来并返回一个list。
你可能会想，不需要map()函数，写一个循环，也可以计算出结果：
的确可以，但是，从上面的循环代码，能一眼看明白“把f(x)作用在list的每一个元素并把结果生成一个新的list”吗？
所以，map()作为高阶函数，实施上它把运算规则抽象了，因此我们不但可以计算简单的f(x)=x^2,还可以计算意思复杂的函数，比如，把这个list所有数字转化为字符串：
只需要一行代码，再看reduce的用法，reduce把一个函数作用在序列[x1,x2,x3..]上，这个函数必须接收两个参数，reduce把结果继续序列的下一元素做累积运算，其效果就是：
当然求和运算可以直接用Python内建函数sum(),没必要动用reduce。
但是如果要把序列[1,3,5,7,9]变换成整数13579,reduce就可以派上用场：
filter
Python内建的filter()函数用于过滤序列。
和map()赖斯，filter()也接收一个函数和一个序列。和map()不同的是，filter()把传入的函数一次作用于每个元素，然后根据返回值是True还是False决定是保留还是丢弃该元素。

